@inject HttpClient Http
@using BaseLibrary.Entities
@using BaseLibrary.Response
@rendermode InteractiveServer
@inject NavigationManager Navigation

@page "/books"

<h3>Books</h3>

<div>
    <button class="btn btn-primary" @onclick="CreateBook">Create New</button>
    <input type="text" @bind="SearchTerm" placeholder="Search..." />
    <button @onclick="LoadBooks">Search</button>
</div>

<table class="table table-bordered">
    <thead>
        <tr>
            <th @onclick="@(() => Sort("Title"))" style="cursor: pointer;">Title</th>
            <th @onclick="@(() => Sort("Author"))" style="cursor: pointer;">Author</th>
            <th @onclick="@(() => Sort("Genre"))" style="cursor: pointer;">Genre</th>
            <th @onclick="@(() => Sort("Price"))" style="cursor: pointer;">Price</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var book in Books)
        {
            <tr>
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td>@book.Genre</td>
                <td>@book.Price</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => EditBook(book.Id)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteBook(book.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div>
    <button @onclick="PreviousPage" disabled="@IsFirstPage">Previous</button>
    <span>Page @CurrentPage of @TotalPages</span>
    <button @onclick="NextPage" disabled="@IsLastPage">Next</button>
</div>

@code {
    private List<Book> Books = new();
    private string SortColumn = "Title";
    private bool Ascending = true;
    private int CurrentPage = 1;
    private int PageSize = 10;
    private int TotalPages;
    private string SearchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initializing component");
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        try
        {
            Console.WriteLine($"Loading books: Page {CurrentPage}, Sort by {SortColumn}, Ascending {Ascending}");
            var response = await Http.GetFromJsonAsync<PagedResponse<Book>>(
                $"api/Books?ascending={Ascending}&pageNumber={CurrentPage}&pageSize={PageSize}&search={SearchTerm}");
            if (response != null)
            {
                Console.WriteLine($"Response received. Filtered books: {response.FilteredCount}");
                Books = response.Items;
                TotalPages = (int)Math.Ceiling((double)response.FilteredCount / PageSize);
                Console.WriteLine($"Books loaded. Current page: {CurrentPage} of {TotalPages}");
            }
            else
            {
                Console.WriteLine("No response from API");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading books: {ex.Message}");
        }
    }


    private async Task Sort(string column)
    {
        Console.WriteLine($"Sorting by: {column}");
        if (SortColumn == column)
        {
            Ascending = !Ascending;
        }
        else
        {
            SortColumn = column;
            Ascending = true;
        }
        await LoadBooks();
    }

    private async Task NextPage()
    {
        Console.WriteLine("Next button clicked");
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            await LoadBooks();
        }
        else
        {
            Console.WriteLine("Already on the last page");
        }
    }

    private async Task PreviousPage()
    {
        Console.WriteLine("Previous button clicked");
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await LoadBooks();
        }
        else
        {
            Console.WriteLine("Already on the first page");
        }
    }

    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage >= TotalPages;

    private async Task CreateBook()
    {
        Navigation.NavigateTo("/books/edit");
    }

    private async Task EditBook(int id)
    {
        Navigation.NavigateTo($"/books/edit/{id}");
    }

    private async Task DeleteBook(int id)
    {
        Console.WriteLine($"Deleting book with ID: {id}");
        var response = await Http.DeleteAsync($"api/Books/{id}");

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Book deleted successfully");
            await LoadBooks();
        }
        else
        {
            Console.WriteLine($"Failed to delete book: {response.ReasonPhrase}");
        }
    }
}
