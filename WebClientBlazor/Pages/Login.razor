@using BaseLibrary.DTOs
@using WebClientBlazor.Helpers
@using WebClientBlazor.Services
@inject TokenAuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject UserService UserService

@page "/login"

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="loginModel.Email" placeholder="Enter your email" />
    </div>
    <div>
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="loginModel.Password" type="password" placeholder="Enter your password" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private LoginUserDTO loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = null;

        try
        {
            // Call the login API via UserService
            var token = await UserService.LoginAsync(loginModel);
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Invalid email or password.";
                return;
            }

            // Save token and update authentication state
            await AuthStateProvider.MarkUserAsLoggedIn(token);

            // Redirect to the home page
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}
