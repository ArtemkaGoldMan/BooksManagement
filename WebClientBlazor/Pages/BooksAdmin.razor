@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using BaseLibrary.Entities
@using BaseLibrary.Response

@page "/booksAdmin"

<h3>Books</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="ShowCreateBookModal">Create New</button>
    <input type="text" class="form-control d-inline w-auto" @bind="SearchTerm" placeholder="Search..." />
    <button class="btn btn-secondary" @onclick="LoadBooks">Search</button>
    <button class="btn btn-outline-secondary" @onclick="ClearSearch">Clear</button>
</div>

<table class="table table-bordered">
    <thead>
        <tr>
            <th @onclick="@(() => Sort("Title"))" style="cursor: pointer;">Title</th>
            <th @onclick="@(() => Sort("Author"))" style="cursor: pointer;">Author</th>
            <th @onclick="@(() => Sort("Genre"))" style="cursor: pointer;">Genre</th>
            <th @onclick="@(() => Sort("Price"))" style="cursor: pointer;">Price</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (Books.Any())
        {
            @foreach (var book in Books)
            {
                <tr>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>@book.Genre</td>
                    <td>@book.Price</td>
                    <td>
                        <button class="btn btn-warning me-2" @onclick="() => ShowEditBookModal(book)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ShowDeleteBookModal(book.Id)">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No books found.</td>
            </tr>
        }
    </tbody>
</table>

<div>
    <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@IsFirstPage">Previous</button>
    <span>Page @CurrentPage of @TotalPages</span>
    <button class="btn btn-secondary" @onclick="NextPage" disabled="@IsLastPage">Next</button>
</div>

<!-- Modal for Create/Edit -->
@if (isBookModalVisible)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="HideBookModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@bookToEdit" OnValidSubmit="SaveBook">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label for="title" class="form-label">Title</label>
                            <InputText id="title" class="form-control" @bind-Value="bookToEdit.Title" />
                        </div>
                        <div class="mb-3">
                            <label for="author" class="form-label">Author</label>
                            <InputText id="author" class="form-control" @bind-Value="bookToEdit.Author" />
                        </div>
                        <div class="mb-3">
                            <label for="genre" class="form-label">Genre</label>
                            <InputText id="genre" class="form-control" @bind-Value="bookToEdit.Genre" />
                        </div>
                        <div class="mb-3">
                            <label for="price" class="form-label">Price</label>
                            <InputNumber id="price" class="form-control" @bind-Value="bookToEdit.Price" />
                        </div>
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="HideBookModal">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

<!-- Modal for Delete Confirmation -->
@if (isDeleteModalVisible)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="HideDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this book?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" @onclick="DeleteBook">Delete</button>
                    <button class="btn btn-secondary" @onclick="HideDeleteModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    private List<Book> Books = new();
    private string SortColumn = "Title";
    private bool Ascending = true;
    private int CurrentPage = 1;
    private int PageSize = 10;
    private int TotalPages;
    private string SearchTerm = "";

    private bool isBookModalVisible = false;
    private bool isDeleteModalVisible = false;
    private string modalTitle = string.Empty;

    private Book bookToEdit = new();
    private int bookIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PagedResponse<Book>>(
                $"api/Books?ascending={Ascending}&pageNumber={CurrentPage}&pageSize={PageSize}&search={SearchTerm}&sortBy={SortColumn}");
            if (response != null)
            {
                Books = response.Items;
                TotalPages = (int)Math.Ceiling((double)response.FilteredCount / PageSize);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading books: {ex.Message}");
        }
    }

    private async Task Sort(string column)
    {
        if (SortColumn == column)
        {
            Ascending = !Ascending;
        }
        else
        {
            SortColumn = column;
            Ascending = true;
        }
        await LoadBooks();
    }

    private async Task NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            await LoadBooks();
        }
    }

    private async Task PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await LoadBooks();
        }
    }

    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage >= TotalPages;

    private void ShowCreateBookModal()
    {
        bookToEdit = new Book();
        modalTitle = "Create Book";
        isBookModalVisible = true;
    }

    private void ShowEditBookModal(Book book)
    {
        bookToEdit = new Book
        {
            Id = book.Id,
            Title = book.Title,
            Author = book.Author,
            Genre = book.Genre,
            Price = book.Price
        };
        modalTitle = "Edit Book";
        isBookModalVisible = true;
    }

    private void HideBookModal()
    {
        isBookModalVisible = false;
    }

    private async Task SaveBook()
    {
        try
        {
            HttpResponseMessage response;
            if (bookToEdit.Id == 0)
            {
                response = await Http.PostAsJsonAsync("api/Books", bookToEdit);
            }
            else
            {
                response = await Http.PutAsJsonAsync($"api/Books/{bookToEdit.Id}", bookToEdit);
            }

            if (response.IsSuccessStatusCode)
            {
                await LoadBooks();
                HideBookModal();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving book: {ex.Message}");
        }
    }

    private void ShowDeleteBookModal(int bookId)
    {
        bookIdToDelete = bookId;
        isDeleteModalVisible = true;
    }

    private void HideDeleteModal()
    {
        isDeleteModalVisible = false;
    }

    private async Task ClearSearch()
    {
        SearchTerm = string.Empty;
        await LoadBooks();
    }

    private async Task DeleteBook()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Books/{bookIdToDelete}");
            if (response.IsSuccessStatusCode)
            {
                await LoadBooks();
                HideDeleteModal();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting book: {ex.Message}");
        }
    }
}
